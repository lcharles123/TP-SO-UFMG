(this["webpackJsonpwww-react"]=this["webpackJsonpwww-react"]||[]).push([[0],{12:function(e,t,a){"use strict";a.r(t);var n=a(0),l=a.n(n),r=a(6),i=a.n(r),o=a(1),s=a(2),c=a(4),u=a(3),m=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns",style:{textAlign:"center"}},l.a.createElement("h2",null,l.a.createElement("a",{href:".",style:{textDecoration:"none",color:"#000"}},"Minimal Linux Live"))))}}]),a}(n.Component);function d(e){for(var t=1;t<=6;t++){var a="item"+t,n=document.getElementById(a),l=t===e?"block":"none";if(!n)throw new Error("menuSwap: objItem is null.");n.style.display=l}}function h(e){document.location.href=e,function(){switch(document.location.href.split("#")[1]){case"home":d(1);break;case"changes":d(2);break;case"about":d(3);break;case"tutorial":d(4);break;case"emulator":d(5);break;case"download":d(6);break;default:document.location.href="#home",d(1)}}()}function v(){!function(e){var t=document.location.href.split("#")[1];void 0===t&&(t=e),h("#"+t)}("home"),function(){var e=document.getElementById("footer");if(!e)throw new Error("thankYou: footer is null.");var t=e.getElementsByTagName("div")[0];if(!t)throw new Error("thankYou: footerDiv is null.");var a=t.innerHTML,n=' <span class="separator">|</span> ',l='<a target="_blank" href="http://{1}">{2}</a>',r=window.location.hostname;switch(r){case"minimal.idzona.com":a+=n,a+=l.replace("{1}","microweber.com").replace("{2}","Microweber CMS"),t.innerHTML=a;break;case"skamilinux.hu":a+=n,a+='Hosted by <a target="_blank" href="http://skamilinux.hu">skamilinux.hu</a> - thank you!',t.innerHTML=a;break;case"minimal.linux-bg.org":a+=n,a+='Hosted by <a target="_blank" href="http://linux-bg.org">linux-bg.org</a> - thank you!',t.innerHTML=a;break;case"ivandavidov.github.io":case"linux.idzona.com":f(),a+=n,a+="Development website - may not be fully functional.",t.innerHTML=a;break;default:""!==r&&(a+=n,a+=l.replace("{1}",r+":"+window.location.port+window.location.pathname).replace("{2}",r),t.innerHTML=a)}}()}function f(){if(!document)throw new Error("thankYou: document is null.");var e=document.getElementById("hm6");if(!e)throw new Error("thankYou: hm6 is null.");e.style.display="none"}var b=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"handleMenu",value:function(e,t){e.preventDefault(),h(t)}},{key:"render",value:function(){var e=this;return l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns",style:{textAlign:"center"}},l.a.createElement("a",{id:"hm1",className:"button button-primary",href:"# ",onClick:function(t){e.handleMenu(t,"#home")}},"Home"),"\xa0",l.a.createElement("a",{id:"hm2",className:"button button-primary",href:"# ",onClick:function(t){e.handleMenu(t,"#changes")}},"Changes"),"\xa0",l.a.createElement("a",{id:"hm3",className:"button button-primary",href:"# ",onClick:function(t){e.handleMenu(t,"#about")}},"About"),"\xa0",l.a.createElement("a",{id:"hm4",className:"button button-primary",href:"# ",onClick:function(t){e.handleMenu(t,"#tutorial")}},"Tutorial"),"\xa0",l.a.createElement("a",{id:"hm5",className:"button button-primary",target:"_blank",rel:"noopener noreferrer",href:"./book "},"Book"),"\xa0",l.a.createElement("a",{id:"hm6",className:"button button-primary",href:"# ",onClick:function(t){e.handleMenu(t,"#emulator")}},"Emulator"),"\xa0",l.a.createElement("a",{id:"hm7",className:"button button-primary",href:"# ",onClick:function(t){e.handleMenu(t,"#download")}},"Download"),"\xa0",l.a.createElement("a",{id:"hm8",className:"button",target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ivandavidov/minimal"},"GitHub")))}}]),a}(n.Component),p=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement("div",{id:"item1",style:{display:"none"}},l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("h4",null,"Home"))),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"Minimal Linux Live is a tiny educational Linux distribution, which is designed to be built from scratch by using a collection of automated shell scripts. Minimal Linux Live offers a core environment with just the ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://kernel.org"},"Linux kernel"),", ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://gnu.org/software/libc"},"GNU C library")," and ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://busybox.net"},"Busybox")," userland utilities. Additional software can be included in the ISO image at build time by using a well-documented configuration file. Minimal Linux Live can be downloaded as a pre-built image, built from scratch or run in a web browser by using a JavaScript PC emulator.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("iframe",{width:"560",height:"315",title:"Minimal Linux Live - YouTube Channel",src:"https://youtube.com/embed/L6ahv5NuwNg?list=PLe3TW5jDbUAiN9E9lvYFLIFFqAjjZS9xS",frameBorder:0,allowFullScreen:!0}))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"Steps to follow if you want to build your own Minimal Linux Live ISO image file:")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("ul",null,l.a.createElement("li",null,"Get the latest source code archive from the ",l.a.createElement("a",{href:"#download",onClick:function(){return h("#download"),!1}},"download")," section."),l.a.createElement("li",null,"Extract the source code archive. Note that even though the extracted scripts are relatively small in size (~1MB), you need ~2GB free disk space for the actual build process."),l.a.createElement("li",null,"Resolve the build dependencies (e.g. GCC, make, etc.). On ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://www.ubuntu.com/"},"Ubuntu")," you can use the following command:",l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),"\xa0\xa0\xa0\xa0",l.a.createElement("code",null,"sudo apt install wget make gawk gcc bc bison flex xorriso libelf-dev libssl-dev")),l.a.createElement("li",null,"Execute the script ",l.a.createElement("strong",null,"build_minimal_linux_live.sh")," and get some coffee. The whole build process should take less than 30 minutes on a modern computer."),l.a.createElement("li",null,"In the end you will find the generated ISO image file ",l.a.createElement("strong",null,"minimal_linux_live.iso")," in the same folder where you started the build process.")))),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"The default build process for version ",l.a.createElement("strong",null,"15-Dec-2019")," generates ~10MB ISO image on 64-bit host machines, but you can make the ISO image even smaller if you exclude the default ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ivandavidov/minimal#overlay-bundles"},"overlay bundles")," from the main ",l.a.createElement("a",{target:"blank",rel:"noopener noreferrer",href:"http://github.com/ivandavidov/minimal/blob/master/src/.config"},".config")," file.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},'If your build fails for some reason, most probably there are unresolved build dependencies. Please have in mind that the build dependencies can vary a lot depending on the Linux OS that you use and the software that you have already installed. If you still have troubles, you should be able to identify the failing script from the console output. You may find it useful to enable "debug" logging in the failing shell script like this: ',l.a.createElement("code",null,"set -ex"),". Manually run the failing script and identify the failing part. If you are unable to find a solution to your problem, then you can ask someone more experienced Linux guy around you or as alternative you can ",l.a.createElement("a",{href:"http://github.com/ivandavidov/minimal/issues",target:"_blank",rel:"noopener noreferrer"},"submit an issue"),".")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"You can run the ISO image in virtual machine, e.g. ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://www.qemu.org"},"QEMU"),", ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://www.virtualbox.org"},"VirtualBox")," or ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://www.vmware.com/products/workstation-player.html"},"VMware Workstation Player")," (free for non-commercial use). You can also burn the ISO image file on CD/DVD or on USB flash device by issuing ",l.a.createElement("code",null,"dd if=minimal_linux_live.iso of=/dev/xxx")," where ",l.a.createElement("code",null,"/dev/xxx")," is your USB flash device.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"You can also use Minimal Linux Live as Docker container. The build process generates very small Docker compatible container image which you can import and use.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},'The generated ISO image file contains Linux kernel, GNU C library compiled with default options, Busybox compiled with default options, quite simple initramfs structure and some "overlay bundles" (the default build process provides few overlay bundles). You don\'t get Windows support out of the box, nor you get any fancy desktop environment. All you get is a simple shell console with default Busybox applets, network support via DHCP and... well, that\'s all. This is why it\'s called "minimal".')),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"Note that by default Minimal Linux Live provides support for legacy BIOS systems. You can change the build configuration settings in the ",l.a.createElement("a",{target:"blank",href:"http://github.com/ivandavidov/minimal/blob/master/src/.config"},".config")," file and rebuild MLL with support for modern UEFI systems.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"All build scripts are well organized and quite small in size. You can easily learn from the scripts, reverse engineer the build process and later modify them to include more stuff (I encourage you to do so). After you learn the basics, you will have all the necessary tools and skills to create your own fully functional Linux based operating system which you have  built entirely from scratch.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"You are encouraged to read the ",l.a.createElement("a",{href:"#tutorial",onClick:function(){return h("#tutorial"),!1}},"tutorial")," which explains the MLL build process. The same tutorial, along with all MLL source code, can be found in the ISO image structure in the ",l.a.createElement("strong",null,"/minimal/rootfs/usr/src")," directory.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"Below you can find several screenshots from version ",l.a.createElement("strong",null,"15-Dec-2019")," which demonstrate what the MLL environment looks like.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"four columns"},l.a.createElement("a",{href:"assets/img/mll_01.png",target:"_blank",title:"Minimal Linux Live - screenshot 1"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"screenshot1",width:"100%",height:"100%",src:"assets/img/mll_01.png"}))),l.a.createElement("div",{className:"four columns"},l.a.createElement("a",{href:"assets/img/mll_02.png",target:"_blank",title:"Minimal Linux Live - screenshot 2"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"screenshot2",width:"100%",height:"100%",src:"assets/img/mll_02.png"}))),l.a.createElement("div",{className:"four columns"},l.a.createElement("a",{href:"assets/img/mll_03.png",target:"_blank",title:"Minimal Linux Live - screenshot 3"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"screenshot3",width:"100%",height:"100%",src:"assets/img/mll_03.png"})))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"four columns"},l.a.createElement("a",{href:"assets/img/mll_04.png",target:"_blank",title:"Minimal Linux Live - screenshot 4"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"screenshot4",width:"100%",height:"100%",src:"assets/img/mll_04.png"}))),l.a.createElement("div",{className:"four columns"},l.a.createElement("a",{href:"assets/img/mll_05.png",target:"_blank",title:"Minimal Linux Live - screenshot 5"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"screenshot5",width:"100%",height:"100%",src:"assets/img/mll_05.png"}))),l.a.createElement("div",{className:"four columns"},l.a.createElement("a",{href:"assets/img/mll_06.png",target:"_blank",title:"Minimal Linux Live - screenshot 6"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"screenshot6",width:"100%",height:"100%",src:"assets/img/mll_06.png"})))))}}]),a}(n.Component),y=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(e){var n;return Object(o.a)(this,a),(n=t.call(this,e)).state={show:e.expanded},n}return Object(s.a)(a,[{key:"handleLogEntryChange",value:function(e){var t=!this.state.show;this.setState({show:t}),function(e,t){for(var a=1;a<=8;a++){var n=document.getElementById("text"+a);if(!n)throw new Error("logSwap: textObj is null");a===e&&(n.style.display=!0===t?"block":"none")}}(this.props.entry,t),e.preventDefault()}},{key:"render",value:function(){var e=this;return l.a.createElement(l.a.Fragment,null,l.a.createElement("strong",null,this.props.version),"\xa0",l.a.createElement("a",{href:"# ",onClick:function(t){e.handleLogEntryChange(t)}},this.state.show?"hide":"show"))}}]),a}(n.Component),g=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(y,{entry:8,version:"15-Dec-2019",expanded:!0}),l.a.createElement("div",{id:"text8",style:{display:"block"}},l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("strong",null,"Updated software base")," - Minimal Linux Live (MLL) is based on Linux kernel 5.4.3, GNU C library 2.30 and Busybox 1.31.1. The generated ISO image file is 10MB (x86_64) and requires 256MB RAM in order to run properly."),l.a.createElement("li",null,l.a.createElement("strong",null,"CloudFlare DNS resolvers")," - by default Minimal Linux Live has 3 DNS resolvers: Gogle Public DNS (8.8.8.8), Quad4 (4.4.4.4) and CloudFlare DNS (1.1.1.1)."),l.a.createElement("li",null,l.a.createElement("strong",null,"GraalVM overlay bundle")," - this overlay bundle provides JDK, Python, Ruby and Node.JS/JavaScript."),l.a.createElement("li",null,l.a.createElement("strong",null,"Adopt OpenJDK overlay bundle")," - this overlay bundle provides JDK from the AdoptOpenJDK project."),l.a.createElement("li",null,l.a.createElement("strong",null,"Zulu JDK overlay bundle")," - this overlay bundle provides JDK from Azul Systems."),l.a.createElement("li",null,l.a.createElement("strong",null,"GoLang overlay bundle")," - this overlay bundle provides Go (programming language) in MLL."),l.a.createElement("li",null,l.a.createElement("strong",null,"Python overlay bundle")," - this overlay bundle provides Python (programming language) in MLL."),l.a.createElement("li",null,l.a.createElement("strong",null,"Install software on demand")," - you can use ",l.a.createElement("code",null,"static-get")," to search and install software directly in MLL. If you use persistent storage, your installed software will be persisted after reboot."),l.a.createElement("li",null,l.a.createElement("strong",null,"Other overlay bundle changes")," - you can build all overlay bundles with special meta-bundle, vitetris has been added (tetris game), java bundle (Oracle JDK) has been deprecated and removed, util_linux no longer requires root privileges to build."),l.a.createElement("li",null,l.a.createElement("strong",null,"Hello MLL overlay bundle")," - the bundle ",l.a.createElement("code",null,"mll_hello")," provides detailed explanation on how to write your own overlay bundle. This particular overlay bundle compiles simple C program and installs it in MLL as executable command."),l.a.createElement("li",null,l.a.createElement("strong",null,"Pure QEMU console mode")," - this allows you to run MLL entirely in your console. This is useful if you don't work with graphical UI or if you work remotely, e.g. via SSH."))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"))}}]),a}(n.Component),E=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(y,{entry:7,version:"28-Jan-2018",expanded:!1}),l.a.createElement("div",{id:"text7",style:{display:"none"}},l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("strong",null,"Updated software base")," - Minimal Linux Live (MLL) is based on Linux kernel 4.14.12, GNU C library 2.26 and Busybox 1.27.2. The generated ISO image file is 9MB and requires 256MB RAM in order to run properly."),l.a.createElement("li",null,"30+ available ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ivandavidov/minimal/blob/master/src/README#L19"},"overlay bundles")," with new additions like nano, vim, Cloud Foundry and BOSH clients, Open JDK, keyboard layouts, the game 2048 and many more."),l.a.createElement("li",null,l.a.createElement("strong",null,"Bundle dependency management")," - good example is the Open JDK overlay bundle which depends on GLIBC and ZLIB. From end user perspective all you need to do is to add Open JDK to the list of overlay bundles that you want to include in MLL and the overlay build system will automatically prepare the overlay bundles required by Open JDK."),l.a.createElement("li",null,l.a.createElement("strong",null,"Separate configuration file for overlay bundles")," - all bundle specific configuration can be externalized in separate configuration file. This makes the main configuration file much smaller and easier to maintain. The entries in the bundle configuration file take precedence over the entries in the main configuration file."),l.a.createElement("li",null,l.a.createElement("strong",null,"Autorun functionality in the initramfs")," - all scripts in ",l.a.createElement("code",null,"/etc/autorun")," are automatically executed on boot. This feature is used by some overlay bundles which require some functionality to be triggered on boot (e.g. the DHCP overlay bundle)."),l.a.createElement("li",null,l.a.createElement("strong",null,"DHCP functionality as separate overlay bundle")," - the DHCP client functionality is triggered automatically on boot. The default DNS resolver is changed to ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://quad9.net"},"Quad 9"),". The public Google DNS resolvers are still present and used as backup. This overlay bundle is enabled by default."),l.a.createElement("li",null,l.a.createElement("strong",null,"Source code as separate overlay bundle")," - previous MLL versions used to include the MLL source code both in the initramfs structure and in the ISO image structure. Now the same source code is included as overlay bundle and can be found either in ",l.a.createElement("code",null,"/minimal/rootfs/usr/src")," (ISO image) or in ",l.a.createElement("code",null,"/usr/src")," (initramfs). This overlay bundle is enabled by default."),l.a.createElement("li",null,l.a.createElement("strong",null,"Docker compatible image")," - The MLL build process generates Docker compatible image ",l.a.createElement("code",null,"mll_image.tgz")," which contains all available software from the MLL ISO image. This image can be imported and used in Docker or in any other container system which supports raw filesystem import. You could add your own software in MLL (e.g. simple HTTP server like 'nweb' which is provided as overlay bundle) and then use Docker instead of running the entire OS."),l.a.createElement("li",null,l.a.createElement("strong",null,"Overlay bundles can be merged in the initramfs"),' - all overlay bundles can be "merged" with the initramfs structure. In this way all overlay bundle functionality is available on boot, ragrdless of the limited hardware detection support. This makes the initramfs structure significantly larger and as consequence you need more RAM since all overlay bundles are available as part of the initramfs.'),l.a.createElement("li",null,l.a.createElement("strong",null,"Structural improvements"),' - the overlay build system is completely separated from the main build system. The main shell scripts are more, but each individual shell script has simpler structure. Both the main build process and the overlay build system rely on "common" logic from separate shell script, which is included in all other relevant shell scripts. The "sparse" image file size has been increased to 3MB in order to handle the size of the default overlay bundles.'),l.a.createElement("li",null,l.a.createElement("strong",null,"UEFI and BIOS support"),' - MLL provides different build flavors, depending on the targeted firmware compatibility. The "bios" build flavor targets legacy BIOS systems and uses precompiled boot loaders provided by the ',l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://syslinux.org"},"syslinux"),' project. The "uefi" build flavor targets modern UEFI systems and uses precompiled boot loaders provided by the ',l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://github.com/ivandavidov/systemd-boot"},"systemd-boot"),' project. You can also generate "mixed" ISO image which can boot on both legacy BIOS and modern UEFI systems. The default build flavor is "bios".'),l.a.createElement("li",null,l.a.createElement("strong",null,"ISO image restructuring"),' - the main ISO image directory no longer contains individual files. One exception is "minimal.img" if the "sparse" overlay location has been enabled in the main configuration file. This makes the ISO image structure easier for future maintenance.'),l.a.createElement("li",null,l.a.createElement("strong",null,"Custom MLL boot logo"),' - the MLL boot logo is provided as separate overlay bundle. However, it is different from the other overlay bundles because it doesn\'t add overlay functionality. Instead, this overlay bundle "injects" the custom MLL boot logo in the kernel source tree and triggers small kernel rebuild. This overlay bundle is enabled by default.'))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"))}}]),a}(n.Component),w=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(y,{entry:6,version:"20-Jan-2017",expanded:!1}),l.a.createElement("div",{id:"text6",style:{display:"none"}},l.a.createElement("ul",null,l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("li",null,l.a.createElement("strong",null,"Updated software base")," - Minimal Linux Live (MLL) is based on Linux kernel 4.4.44, GNU C library 2.24 and Busybox 1.26.2. The generated ISO image file is 7MB and requires 256MB RAM in order to run properly."),l.a.createElement("li",null,l.a.createElement("strong",null,"UEFI support")," - MLL provides experimental UEFI support and the live CD can boot on UEFI based systems which provide UEFI shell."),l.a.createElement("li",null,l.a.createElement("strong",null,"Additional software via overlay bundles"),' - the MLL architecture has been significantly improved and you can add more software via the so-called "overlay bundles". This feature has been documented in the ".config" file, as well as in the internal README documents. By default these overlay bundles are not part of the build process because they rely on the host machine environment and they may or may not be built correctly on your particular machine. Nevertheless, turning this feature on is very simple and I encourage you to experiment with it.'),l.a.createElement("li",null,l.a.createElement("strong",null,"Persistence support"),' - MLL has the ability to transparently persist the changes that have been made during the live session and these changes will be preserved between reboots. You can use this feature to add your own software in MLL, change the MLL file/directory structure or simply to persist whatever changes you\'ve made during the live session. This feature has been documented in the ".config" file, the internal README documents and in the internal shell script comments.'),l.a.createElement("li",null,l.a.createElement("strong",null,"Smaller ISO image size")," - one of the goals for this release was to minimize the ISO image size and make it as small as possible. The final result is ISO image, which is now less than 7MB when MLL has been generated with the default configuration options. However, the smaller ISO image size comes at cost and you need more RAM (256MB) in order to boot MLL properly."),l.a.createElement("li",null,l.a.createElement("strong",null,"GCC optimization flags")," - the MLL configuration allows you to provide your own GCC flags which are used when the software pieces are compiled. These GCC optimization flags are not magical and they may or may not work fine on your particular host machine. They work fine on Ubuntu/Mint host machines and should work fine on other Debian based host machines. You can disable this feature if you get weird compilation issues on your host machine during the build process."),l.a.createElement("li",null,l.a.createElement("strong",null,"Syslinux as download dependency"),' - the "Syslinux" build dependency is no longer mandatory prerequisite requirement because the Syslinux source package is downloaded automatically as part of the build process.'),l.a.createElement("li",null,l.a.createElement("strong",null,"Graphical boot mode with configurable screen resolution")," - MLL can boot in graphical mode. At the beginning of the boot process you are presented with option to choose the screen resolution. This feature currently works only in BIOS boot mode."),l.a.createElement("li",null,l.a.createElement("strong",null,"Rescue shells during boot"),' - the MLL boot process has been enhanced and you can temporarily "exit" the boot process in the so-called "rescue shell". In fact, this is a normal shell which runs with PID 1. This is useful if you want to have interactive environment (i.e. shell) while you are still in early "pre-init" boot stage.'),l.a.createElement("li",null,l.a.createElement("strong",null,"Initial RAM filesystem in separate directory structure")," - the initramfs structure has been externalized in separate directory. This makes it easier to modify the initramfs environment."),l.a.createElement("li",null,l.a.createElement("strong",null,"Optional use of preconfigured Linux kernel and Busybox")," - you can provide custom Linux kernel and Busybox configurations. This is useful if you want to build MLL with many non-default options or if you want to distribute your own version of MLL."),l.a.createElement("li",null,l.a.createElement("strong",null,"Optional use of already downloaded sources")," - this feature does what it says: if you turn it on, you don't need internet connection and you will be using already downloaded sources. This is useful if you don't want to use internet connection or if you want to distribute your own version of MLL which includes specific sources."),l.a.createElement("li",null,l.a.createElement("strong",null,"Many more internal improvements"),' - script enhancements, improved comments and better documentation, the newly introduced overlay build subsystem, additional helpful scripts, etc. Check the ".config" file and the internal README documents for more details.'))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"))}}]),a}(n.Component),L=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(y,{entry:5,version:"03-Apr-2016",expanded:!1}),l.a.createElement("div",{id:"text5",style:{display:"none"}},l.a.createElement("ul",null,l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("li",null,l.a.createElement("strong",null,"Minimal Linux Live")," is now based on ",l.a.createElement("strong",null,"Linux kernel 4.4.6"),", ",l.a.createElement("strong",null,"GNU C library 2.23")," and ",l.a.createElement("strong",null,"Busybox 1.24.2"),". The generated ISO image file is ~4MB larger due to glibc overhead and requires more RAM (64MB is enough)."),l.a.createElement("li",null,"The build architecture has been revised and now the only core dependency to the host OS is the actual C compiler along with the related binary utils. Kernel headers and main C library (which used to be implicit dependencies) are now automatically generated and used as part of the overall build process."),l.a.createElement("li",null,"The DNS resolving issue has been fixed and the network/internet related Busybox applets (ping, wget, etc.) now work fine."),l.a.createElement("li",null,"The ISO image generation process is now in a separate script file, completely detached from the kernel build infrastructure. This allows the Minimal Linux Live users to modify the ISO image file/directory structure before the actual ISO generation."),l.a.createElement("li",null,"The internal script comments have been revised and now they are more descriptive than before."),l.a.createElement("li",null,"The experimental folder has been removed."))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"))}}]),a}(n.Component),x=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(y,{entry:4,version:"14-Sep-2015",expanded:!1}),l.a.createElement("div",{id:"text4",style:{display:"none"}},l.a.createElement("ul",null,l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("li",null,l.a.createElement("strong",null,"Minimal Linux Live")," is now based on ",l.a.createElement("strong",null,"Linux kernel 4.1.6")," and ",l.a.createElement("strong",null,"Busybox 1.23.2"),"."),l.a.createElement("li",null,"The build process is now parallelized between all available CPU cores, therefore the overall build time is significantly reduced."),l.a.createElement("li",null,"There is DHCP network support for all network devices detected by the kernel. Note that DNS is not working due to well-known static linking issues caused by glibc."),l.a.createElement("li",null,"The ISO image is now generated by using ",l.a.createElement("strong",null,"genisoimage"),". This fixes some issues with Debian and Arch based host operating systems."),l.a.createElement("li",null,"In addition to the above changes, if you ",l.a.createElement("a",{href:"#download",onClick:function(){return h("#download"),!1}},"download")," the current stable build scripts, you will notice a folder named ",l.a.createElement("strong",null,"experimental"),". This folder contains some interesting scripts which produce ISO based on Linux kernel and ",l.a.createElement("a",{href:"http://landley.net/toybox",target:"_blank",rel:"noopener noreferrer"},"ToyBox")," instead of Busybox. Please have in mind that this is work in progress and these scripts may not work on your host OS."))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"))}}]),a}(n.Component),k=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(y,{entry:3,version:"07-Feb-2015",expanded:!1}),l.a.createElement("div",{id:"text3",style:{display:"none"}},l.a.createElement("ul",null,l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("li",null,l.a.createElement("strong",null,"Minimal Linux Live")," is now based on ",l.a.createElement("strong",null,"Linux kernel 3.18.6")," and ",l.a.createElement("strong",null,"Busybox 1.23.1"),"."))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"))}}]),a}(n.Component),O=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(y,{entry:2,version:"25-Aug-2014",expanded:!1}),l.a.createElement("div",{id:"text2",style:{display:"none"}},l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("strong",null,"Minimal Linux Live")," is now based on ",l.a.createElement("strong",null,"Linux kernel 3.16.1")," and ",l.a.createElement("strong",null,"Busybox 1.22.1"),"."),l.a.createElement("li",null,"The boot process is now based on ",l.a.createElement("strong",null,"/sbin/init")," and ",l.a.createElement("strong",null,"/etc/inittab"),". There are four available consoles. You can switch between them with ",l.a.createElement("strong",null,"Alt + F1")," up to ",l.a.createElement("strong",null,"Alt + F4"),"."),l.a.createElement("li",null,"Shell scripts have been updated. Now the downloaded source bundles are stored in separate folder. If the download process is interrupted, it will continue the next time the scripts are executed. The most notable change is in ",l.a.createElement("strong",null,"5_generate_rootfs.sh")," which now generates root file system with structure compatible with ",l.a.createElement("strong",null,"/sbin/init")," and ",l.a.createElement("strong",null,"/etc/inittab"),"."))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"))}}]),a}(n.Component),S=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(y,{entry:1,version:"28-Jul-2014",expanded:!1}),l.a.createElement("div",{id:"text1",style:{display:"none"}},l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("strong",null,"Minimal Linux Live")," is now based on ",l.a.createElement("strong",null,"Linux kernel 3.15.6")," and ",l.a.createElement("strong",null,"Busybox 1.22.1"),"."),l.a.createElement("li",null,"The boot process is based on simple ",l.a.createElement("strong",null,"/init")," script."))))}}]),a}(n.Component),M=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement("div",{id:"item2",style:{display:"none"}},l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("h4",null,"Change Log"))),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement(g,null),l.a.createElement(E,null),l.a.createElement(w,null),l.a.createElement(L,null),l.a.createElement(x,null),l.a.createElement(k,null),l.a.createElement(O,null),l.a.createElement(S,null))))}}]),a}(n.Component),N=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement("div",{id:"item3",style:{display:"none"}},l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("h4",null,"About This Project"))),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"My name is ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://linkedin.com/in/ivandavidov"},"Ivan Davidov")," and I currently live and work in ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://en.wikipedia.org/wiki/Sofia"},"Sofia"),", ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://en.wikipedia.org/wiki/Bulgaria"},"Bulgaria"),".")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"I am professional Java software engineer (surprisingly, Java developers tend to know some Linux stuff) and I have been trying to create my own Linux OS for a very long time. Over the years I found some good online tutorials, but most of them are not simple to follow and pretty much none of them explains in detail what has been done and why it's done in this particular way. In most cases the tutorials are outdated or incomplete and there is high chance that you will end up with something broken.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"You can learn a lot from these online tutorials, as I did. In fact, the scripts that I created are based on the same information resources which you might have already found. The difference is that this project provides you with fully functional set of shell scripts which automatically build fully functional live Linux OS, detailed tutorial and probably the best internal documentation you will ever find in an open source project.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"You can follow Minimal Linux Live on ",l.a.createElement("a",{href:"http://facebook.com/MinimalLinuxLive",target:"_blank",rel:"noopener noreferrer"},"Facebook"),". If you'd like to contact me, my e-mail is: ",l.a.createElement("strong",null,"davidov [dot] i (at) gmail ","{","dot","}"," com"),". Let me know if you find this project useful. Thanks! :)")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"My LinkedIn profile is here: ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://linkedin.com/in/ivandavidov"},"http://linkedin.com/in/ivandavidov"))))}}]),a}(n.Component),j=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement("div",{id:"item4",style:{display:"none"}},l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("h4",null,"Minimal Linux Live Tutorial"))),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"Would you like to learn how to build your own minimal live Linux OS?")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"./the_dao_of_minimal_linux_live.txt"},"The Dao of Minimal Linux Live")," is a tutorial based on the first published version of Minimal Linux Live. The tutorial explains in detail what steps are involved in the creation of simple live Linux OS entirely from scratch, the inner structure of the build scripts and provides you with more information on how to improve/upgrade the generated OS with other generic stuff (e.g. users & groups, /etc/inittab).")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"You can also refer to the ",l.a.createElement("a",{href:"http://github.com/ivandavidov/minimal-linux-script",target:"_blank",rel:"noopener noreferrer"},"Minimal Linux Script")," project which provides you with the minimal set of shell script commands that you need in order to create simple, yet fully functional Linux based operating system.")))}}]),a}(n.Component),_=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement("div",{id:"item5",style:{display:"none"}},l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("h4",null,"Online PC Emulator"))),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"You can try ",l.a.createElement("b",null,"Minimal Linux Live")," directly in your browser. The link below will open new browser window (or tab) with JavaScript based PC emulator which will automatically run Minimal Linux Live version ",l.a.createElement("strong",null,"28-Jan-2018"),". Please be advised that this PC emulator runs entirely in your browser and therefore it is not very fast.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("a",{target:"_blank",href:"emulator"},"Minimal Linux Live - emulator"))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"Some screenshots with Minimal Linux Live running in the JavaScript PC emulator:")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"three columns"},l.a.createElement("a",{href:"assets/img/emulator_01.jpg",target:"_blank",title:"Minimal Linux Live in JavaScript PC emulator- screenshot 1"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"emulator1",width:"100%",height:"100%",src:"assets/img/emulator_01.jpg"}))),l.a.createElement("div",{className:"three columns"},l.a.createElement("a",{href:"assets/img/emulator_02.jpg",target:"_blank",title:"Minimal Linux Live in JavaScript PC emulator- screenshot 2"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"emulator2",width:"100%",height:"100%",src:"assets/img/emulator_02.jpg"}))),l.a.createElement("div",{className:"three columns"},l.a.createElement("a",{href:"assets/img/emulator_03.jpg",target:"_blank",title:"Minimal Linux Live in JavaScript PC emulator- screenshot 3"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"emulator3",width:"100%",height:"100%",src:"assets/img/emulator_03.jpg"}))),l.a.createElement("div",{className:"three columns"},l.a.createElement("a",{href:"assets/img/emulator_04.jpg",target:"_blank",title:"Minimal Linux Live in JavaScript PC emulator- screenshot 4"},l.a.createElement("img",{alt:"Minimal Linux Live",id:"emulator4",width:"100%",height:"100%",src:"assets/img/emulator_04.jpg"})))))}}]),a}(n.Component),I=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement("div",{id:"item6",style:{display:"none"}},l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("h4",null,"Download Section"))),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"The build scripts for version ",l.a.createElement("code",null,"15-Dec-2019")," are available as ",l.a.createElement("strong",null,"tar.xz")," archive.",l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("a",{href:"http://github.com/ivandavidov/minimal/releases/download/15-Dec-2019/minimal_linux_live_15-Dec-2019_src.tar.xz",title:"Minimal Linux Live - shell scripts"},"minimal_linux_live_","15-Dec-2019","_src.tar.xz")," - from GitHub.")))),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"The link below provides pre-built ISO image with support for legacy BIOS (64-bit, Intel CPUs).",l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("a",{href:"http://github.com/ivandavidov/minimal/releases/download/15-Dec-2019/minimal_linux_live_15-Dec-2019_64-bit_bios.iso",title:"Minimal Linux Live - ISO image file for 64-bit CPUs (legacy BIOS)"},"minimal_linux_live_","15-Dec-2019","_64-bit_bios.iso")," - 64-bit ISO image from GitHub.")))),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"You can browse the ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://github.com/ivandavidov/minimal/releases"},"GitHub releases")," where you will find all source archives, as well as pre-built ISO images with support for BIOS, UEFI and mixed BIOS/UEFI mode.")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns"},"You can take a look at the latest development sources in the ",l.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"http://github.com/ivandavidov/minimal"},"GitHub project"),".")))}}]),a}(n.Component),C=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement("div",{id:"sections",style:{boxShadow:"0px 2px 8px rgba(0, 0, 0, 0.2)",paddingLeft:"4px",paddingRight:"4px"}},l.a.createElement(p,null),l.a.createElement(M,null),l.a.createElement(N,null),l.a.createElement(j,null),l.a.createElement(_,null),l.a.createElement(I,null))}}]),a}(n.Component),T=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"twelve columns",style:{textAlign:"center"}},l.a.createElement("a",{className:"button",href:"# ",onClick:function(e){window.scrollTo(0,0)}},"Go to top"))),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"),l.a.createElement("div",{id:"footer",className:"row",style:{textAlign:"center"}},l.a.createElement("div",{className:"twelve columns"},l.a.createElement("a",{href:".",title:"Minimal Linux Live"},"Minimal Linux Live"),"\xa0",l.a.createElement("span",{className:"separator"},"|"),"\xa0Copyright \xa9 ","2014 - 2020")),l.a.createElement("div",{style:{fontSize:"10%"}},"\xa0"))}}]),a}(n.Component),z=function(e){Object(c.a)(a,e);var t=Object(u.a)(a);function a(){return Object(o.a)(this,a),t.apply(this,arguments)}return Object(s.a)(a,[{key:"render",value:function(){return l.a.createElement("div",{className:"container"},l.a.createElement(m,null),l.a.createElement(b,null),l.a.createElement(C,null),l.a.createElement(T,null))}},{key:"componentDidMount",value:function(){v()}}]),a}(n.Component);i.a.render(l.a.createElement(z,null),document.getElementById("root"))},7:function(e,t,a){e.exports=a(12)}},[[7,1,2]]]);
//# sourceMappingURL=main.e3efb3fe.chunk.js.map